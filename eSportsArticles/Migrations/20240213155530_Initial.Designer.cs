// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using eSportsArticles.Data;

#nullable disable

namespace eSportsArticles.Migrations
{
    [DbContext(typeof(AppDBContext))]
    [Migration("20240213155530_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.15")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("eSportsArticles.Models.Article", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Color")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PictureURL")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<string>("Size")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("articleCategory")
                        .HasColumnType("int");

                    b.Property<string>("articleName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("availablePeriod")
                        .HasColumnType("datetime2");

                    b.Property<bool>("isAvailable")
                        .HasColumnType("bit");

                    b.Property<float>("ratingStars")
                        .HasColumnType("real");

                    b.HasKey("Id");

                    b.ToTable("Articles");
                });

            modelBuilder.Entity("eSportsArticles.Models.Employee", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Salary")
                        .HasColumnType("int");

                    b.Property<string>("employeePosition")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("firstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("lastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("storeId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("storeId");

                    b.ToTable("Employees");
                });

            modelBuilder.Entity("eSportsArticles.Models.Store", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PictureURL")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("closeHour")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("openHour")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("storeName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Stores");
                });

            modelBuilder.Entity("eSportsArticles.Models.StoresArticles", b =>
                {
                    b.Property<Guid>("storeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("articleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("storeId", "articleId");

                    b.HasIndex("articleId");

                    b.ToTable("StoresArticles");
                });

            modelBuilder.Entity("eSportsArticles.Models.Employee", b =>
                {
                    b.HasOne("eSportsArticles.Models.Store", "Store")
                        .WithMany("employees")
                        .HasForeignKey("storeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Store");
                });

            modelBuilder.Entity("eSportsArticles.Models.StoresArticles", b =>
                {
                    b.HasOne("eSportsArticles.Models.Article", "Article")
                        .WithMany("storeArticles")
                        .HasForeignKey("articleId")
                        .IsRequired();

                    b.HasOne("eSportsArticles.Models.Store", "Store")
                        .WithMany("storeArticles")
                        .HasForeignKey("storeId")
                        .IsRequired();

                    b.Navigation("Article");

                    b.Navigation("Store");
                });

            modelBuilder.Entity("eSportsArticles.Models.Article", b =>
                {
                    b.Navigation("storeArticles");
                });

            modelBuilder.Entity("eSportsArticles.Models.Store", b =>
                {
                    b.Navigation("employees");

                    b.Navigation("storeArticles");
                });
#pragma warning restore 612, 618
        }
    }
}
